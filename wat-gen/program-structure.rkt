#lang racket

(provide Module Import Export Func FuncSignature Param Result Local Start i32 i64 f32 f54 Body Instruction)
;; type Module = (Module (Listof definitions))
(struct Module (ds) #prefab)
;; type Import = (Import (modulename funcname FuncSignature)) 
(struct Import (m f fs) #prefab)
;; type Export = (Export (name funcdesc))
(struct Export (n d) #prefab)
;; type Func = (Func (FuncSignature (Listof Locals) Body))
(struct Func (s ls b) #prefab)
;; type FuncSignature = (FuncSignature (name? (Listof Params) Result))
(struct FuncSignature (n ps r) #prefab)
;; type Param = (Param (name? Type))
(struct Param (n t) #prefab)
;; type Result = (Result (Type))
(struct Result (t) #prefab)
;; type Local = (Local (name? Type))
(struct Local (n t) #prefab)
;; type Start = (Start (function))
(struct Start (f) #prefab)
;; type Type = i32 | i64 | f32 | f64
(struct i32 () #prefab)
(struct i64 () #prefab)
(struct f32 () #prefab)
(struct f64 () #prefab)
;; type Body = (Body (Listof Instructions))
(struct Body (is) #prefab)
;; type Instruction = (Instruction TODO:)
;; type Start = (Start (funcidx))
(struct Start (f) #prefab)