#lang racket

(provide Module Import Export Func FuncSignature Param Result Local Start i32 i64 f32 f64 Body ZrInst UnInst BiInst Const)
;; type Module = (Module (Listof definitions))
(struct Module (ds) #:prefab)
;; type Import = (Import (modulename funcname FuncSignature)) 
(struct Import (m f fs) #:prefab)
;; type Export = (Export (name FuncSignature))
(struct Export (n d) #:prefab)
;; type Func = (Func (FuncSignature (Listof Locals) Body))
(struct Func (s ls b) #:prefab)
;; type FuncSignature = (FuncSignature (name? (Listof Params) Result))
(struct FuncSignature (n ps r) #:prefab)
;; type Param = (Param (name? Type))
(struct Param (n t) #:prefab)
;; type Result = (Result (Type))
(struct Result (t) #:prefab)
;; type Local = (Local (name? Type))
(struct Local (n t) #:prefab)
;; type Type = i32 | i64 | f32 | f64
(struct i32 () #:prefab)
(struct i64 () #:prefab)
(struct f32 () #:prefab)
(struct f64 () #:prefab)
;; type Body = (Body (Listof Instructions))
(struct Body (is) #:prefab)
;; type Instruction = ZrInst | UnInst | BiInst
;; type ZrInst = (ZrInst (name))
(struct ZrInst (n) #:prefab)
;; type UnInst = (Uninst (name Instruction))
(struct UnInst (n i) #:prefab)
;; type BiInst = (BiInst (name Instruction1 Instruction2))
(struct BiInst (n i1 i2) #:prefab)
;; type Const = (Const (n))
(struct Const (n) #:prefab)
;; type Start = (Start (funcidx))
(struct Start (f) #:prefab)